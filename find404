#!/usr/bin/env python
# vi: ft=python

import requests
from bs4 import BeautifulSoup
from urllib.parse import urlparse, urljoin
from collections import deque , defaultdict

def get_all_links(url, domain):
    try:
        response = requests.get(url, timeout=10)
        if response.status_code != 200:
            print(f"Failed to access {url}: Status code {response.status_code}")
            return []

        soup = BeautifulSoup(response.text, 'html.parser')
        links = set()
        for a_tag in soup.find_all('a', href=True):
            href = a_tag['href']
            href_parsed = urlparse(href)
            if not href_parsed.netloc or href_parsed.netloc == domain:
                link = urljoin(url, href)
                links.add(link)
            elif href_parsed.netloc != domain:
                if href_parsed.scheme and href_parsed.netloc:
                    links.add(href)
        return links
    except Exception as e:
        print(f"An error occurred: {e}")
        return []

def find_404s(start_url):
    domain = urlparse(start_url).netloc
    visited = set()
    to_visit = deque([(start_url, None)])
    parent_map = defaultdict(list)

    while to_visit:
        url, parent = to_visit.pop()
        if url not in visited:
            visited.add(url)
            if parent:
                parent_map[url].append(parent)
            try:
                response = requests.get(url, timeout=10)
                if response.status_code == 404:
                    print(f"404 found at: {url}, linked from {parent_map[url]}")
                elif response.status_code == 200:
                    links = get_all_links(url, domain)
                    if urlparse(url).netloc == domain:
                        to_visit.extend((link, url) for link in links)
                    else:

                        to_visit.extend((link, url) for link in links if urlparse(link).netloc == domain)
            except requests.RequestException as e:
                print(f"Failed to access {url}: {e}")

if __name__ == "__main__":
    import sys
    if len(sys.argv) < 2:
        print("Usage: find404 <url>")
        exit(1)
    start_url = sys.argv[1]

    find_404s(start_url)
